#version 460 core

layout(local_size_x = 64) in;


layout(std430, binding = 0) buffer DataBuffer {
    float values[]; // Access to the float array values
};


layout(std430, binding = 1) buffer PropertiesBuffer {
    float properties[]; // Access to the float array values
};

layout(binding = 2, offset = 0) uniform atomic_uint activeParticleCount;

// properties memory layout
// lifetime 2 floats offset: 0
// size 2 floats offset: 2
// position 6 floats offset: 4
// velocity 6 floats offset: 10
// colour 8 floats offset: 16

uniform uint uActiveParticleOffset;

//pseudo-random generator
float random(uint seed) {
    seed = (seed ^ 61u) ^ (seed >> 16);
    seed *= 9u;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15);
    return float(seed) / 4294967296.0; // Normalize to [0,1)
}


void main() {

    uint idx = gl_GlobalInvocationID.x;
    //uint offset = idx * 13 + (uActiveParticleOffset * 13);
    uint offset = idx * 13;
    
    float lifetime = values[offset + 11];

    if (lifetime > 0.0) {
        return;
    }

    uint particleIndex = atomicCounterIncrement(activeParticleCount);

    if (particleIndex >= uActiveParticleOffset) {
        return;
    }


    //pos
    values[offset] = mix(properties[4],properties[7],random(offset));
    values[offset+1] = mix(properties[5],properties[8],random(offset+1));
    values[offset+2] = mix(properties[6],properties[9],random(offset+2));

    //colour
    values[offset +3] = mix(properties[16],properties[20],random(offset+3));
    values[offset +4] = mix(properties[17],properties[21],random(offset+4));
    values[offset +5] = mix(properties[18],properties[22],random(offset+5));
    values[offset +6] = mix(properties[19],properties[23],random(offset+6));

    //size
    values[offset +7] = mix(properties[2],properties[3],random(offset+7));

    //velocity
    values[offset+8] = mix(properties[10],properties[13],random(offset+8));
    values[offset+9] = mix(properties[11],properties[14],random(offset+9));
    values[offset+10] = mix(properties[12],properties[15],random(offset+10));

    //lifetime
    values[offset +11] = mix(properties[0],properties[1],random(offset+11));

    //maxLifetime
    values[offset +12] = values[offset+11];
}
